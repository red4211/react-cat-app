{"version":3,"sources":["List.js","CatCard.js","CatImageList.js","CategoryFilter.js","App.js","serviceWorker.js","index.js"],"names":["List","props","renderList","list","map","elem","index","key","value","id","name","className","onChange","e","showBreed","CatCard","catInfo","length","showCatCard","breedInfo","breeds","onClick","closeCatCard","src","url","alt","description","life_span","weight","metric","child_friendly","dog_friendly","health_issues","temperament","CatImageList","catImages","showNextPage","CategoryFilter","categoriesList","categories","setCategory","App","state","pageNumber","currCategory","categoryIsSet","fetch","target","headers","then","res","json","result","setState","prevState","str","changedState","Promise","all","this","res1","res2","res3","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a994c83.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction List(props) {\r\n\tconst renderList = props.list.map((elem, index) => {\r\n\t\treturn (\r\n\t\t\t<option key={index} value={elem.id}>\r\n\t\t\t\t{elem.name}{\" \"}\r\n\t\t\t</option>\r\n\t\t);\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className=\"breed-select\" >\r\n\t\t\tShow info about breed:{\" \"}\r\n\t\t\t<select\r\n\t\t\t\tonChange={e => {\r\n\t\t\t\t\tprops.showBreed(e);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{renderList}\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nfunction CatCard(props) {\r\n  if (props.catInfo.length > 0 && props.showCatCard === true) {\r\n    const breedInfo = props.catInfo[0].breeds[0];\r\n    return (\r\n      <div className=\"cat-card\">\r\n        <div className=\"close\" onClick={props.closeCatCard}>\r\n          X\r\n        </div>\r\n        <img src={props.catInfo[0].url} alt=\"\" />\r\n\r\n        <div className=\"cat-card-in\">\r\n          <p className=\"title\">{breedInfo.name} </p>\r\n          <p>{breedInfo.description} </p>\r\n\r\n          <ul className=\"info-list\">\r\n            <li>\r\n              <b>Lifespan: </b>\r\n              {breedInfo.life_span + \" years\"}{\" \"}\r\n            </li>\r\n            <li>\r\n              <b>Weight: </b>\r\n              {breedInfo.weight.metric + \" kg\"}{\" \"}\r\n            </li>\r\n            <li>\r\n              <b>Child friendly: </b>\r\n              {breedInfo.child_friendly}{\" \"}\r\n            </li>\r\n            <li>\r\n              <b>Dog friendly: </b>\r\n              {breedInfo.dog_friendly}{\" \"}\r\n            </li>\r\n            <li>\r\n              <b>Health issues: </b>\r\n              {breedInfo.health_issues}{\" \"}\r\n            </li>\r\n            <li>\r\n              <b>Temperament: </b>\r\n              {breedInfo.temperament}{\" \"}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default CatCard;\r\n","import React from \"react\";\r\nfunction CatImageList(props) {\r\n\tconst list = props.catImages.map((elem, index) => {\r\n\t\treturn (\r\n\t\t\t<li key={index}>\r\n\t\t\t\t<img src={elem.url} alt=\"\" />\r\n\t\t\t</li>\r\n\t\t);\r\n\t});\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<button onClick={props.showNextPage}>More cat images</button>\r\n\t\t\t<ul className=\"catImageList\">{list} </ul>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CatImageList;\r\n","import React from \"react\";\r\nfunction CategoryFilter(props) {\r\n  const categoriesList = props.categories.map((elem, index) => {\r\n    return (\r\n      <option key={index} value={elem.id}>\r\n        {elem.name}{\" \"}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"category-filter\" >\r\n      Image category:{\" \"}\r\n      <select onChange={props.setCategory}>\r\n        <option value=\"\">None</option>\r\n        {categoriesList}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\nexport default CategoryFilter;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport List from \"./List\";\nimport CatCard from \"./CatCard\";\nimport CatImageList from \"./CatImageList\";\nimport CategoryFilter from \"./CategoryFilter\";\n\nclass App extends Component {\n  state = {\n    catInfo: [],\n    breeds: [],\n    catImages: [],\n    pageNumber: 0,\n    categories: [],\n    currCategory: \"\",\n    categoryIsSet: false,\n    showCatCard: false\n  };\n\n  componentDidMount() {\n    Promise.all([\n      fetch(\"https://api.thecatapi.com/v1/breeds\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"2e902c7d-d9c1-49cf-9cf3-0ad15e74fe2f\"\n        }\n      }),\n      fetch(\n        \"https://api.thecatapi.com/v1/images/search?limit=9&page=\" +\n          this.state.pageNumber +\n          \"&order=Desc\"\n      ),\n      fetch(\"https://api.thecatapi.com/v1/categories\")\n    ])\n      .then(([res1, res2, res3]) => {\n        return Promise.all([res1.json(), res2.json(), res3.json()]);\n      })\n      .then(([res1, res2, res3]) => {\n        this.setState({ breeds: res1, catImages: res2, categories: res3 });\n      });\n  }\n\n  showBreed = id => {\n    fetch(\n      \"https://api.thecatapi.com/v1/images/search?breed_ids=\" + id.target.value,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"2e902c7d-d9c1-49cf-9cf3-0ad15e74fe2f\"\n        }\n      }\n    )\n      .then(res => res.json())\n      .then(result => {\n        this.setState({ catInfo: result, showCatCard: true });\n      });\n  };\n\n  showNextPage = () => {\n    this.setState(\n      prevState => ({\n        pageNumber: prevState.pageNumber + 1\n      }),\n      () => {\n        const str = this.state.categoryIsSet\n          ? \"https://api.thecatapi.com/v1/images/search?limit=9&page=\" +\n            this.state.pageNumber +\n            \"&category_ids=\" +\n            this.state.currCategory\n          : \"https://api.thecatapi.com/v1/images/search?limit=9&page=\" +\n            this.state.pageNumber +\n            \"&order=Desc\";\n        fetch(str)\n          .then(res => res.json())\n          .then(result => {\n            this.setState({ catImages: result });\n          });\n      }\n    );\n  };\n\n  setCategory = e => {\n    let changedState = { pageNumber: 0, currCategory: e.target.value };\n    if (e.target.value === \"\") {\n      changedState.categoryIsSet = false;\n    } else {\n      changedState.categoryIsSet = true;\n    }\n\n    this.setState(changedState, () => {\n      fetch(\n        \"https://api.thecatapi.com/v1/images/search?limit=9&page=0&category_ids=\" +\n          this.state.currCategory\n      )\n        .then(res => res.json())\n        .then(result => {\n          this.setState({ catImages: result });\n        });\n    });\n  };\n\n  closeCatCard = () => {\n    this.setState({ showCatCard: false });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <List list={this.state.breeds} showBreed={this.showBreed} />\n        <CatCard\n          catInfo={this.state.catInfo}\n          closeCatCard={this.closeCatCard}\n          showCatCard={this.state.showCatCard}\n        />\n       <CategoryFilter\n          categories={this.state.categories}\n          setCategory={this.setCategory}\n        />\n        <CatImageList\n          catImages={this.state.catImages}\n          showNextPage={this.showNextPage}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}